{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/board/board.component.html","src/app/move-list/move-list.component.html","node_modules/tslib/tslib.es6.js","src/app/app-routing.module.ts","src/app/app.component.css","src/app/app.component.ts","src/app/app.module.ts","src/app/board/board.component.css","src/app/board/board.component.ts","src/app/move-list/move-list.component.css","src/app/move-list/move-list.component.ts","src/app/promotion.service.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"column1\\\">\\r\\n        <app-board></app-board>\\r\\n    </div>\\r\\n    \\r\\n    <div class=\\\"column3\\\">\\r\\n        <app-move-list></app-move-list>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<router-outlet></router-outlet>\"","export default \"<div id=\\\"board1\\\" style=\\\"width: 70%; float: right; padding-top: 10%;\\\"></div>\\r\\n\\r\\n<button (click)=\\\"serviceCheck()\\\">Add Move</button>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<div title = \\\"Move List\\\" style=\\\"padding-top: 15%;\\\">\\r\\n    <nav>\\r\\n        <ul>\\r\\n            <li>Move List:</li>\\r\\n            <li *ngFor=\\\"let item of moveList\\\">\\r\\n                id: {{ item.id }}, Piece: {{ item.piece }}, From: {{ item.source }}, To: {{ item.target }}\\r\\n            </li>\\r\\n        </ul>\\r\\n    </nav>\\r\\n</div>\\r\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".row {\\r\\n    display: -webkit-box;\\r\\n    display: flex;\\r\\n  }\\r\\n\\r\\n  .column1 {\\r\\n    -webkit-box-flex: 60%;\\r\\n            flex: 60%\\r\\n  }\\r\\n\\r\\n  .column2 {\\r\\n    -webkit-box-flex: 10%;\\r\\n            flex: 10%;\\r\\n  }\\r\\n\\r\\n  .column3 {\\r\\n      -webkit-box-flex: 40%;\\r\\n              flex: 40%;\\r\\n      text-align: center;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxvQkFBYTtJQUFiLGFBQWE7RUFDZjs7RUFFQTtJQUNFLHFCQUFRO1lBQVI7RUFDRjs7RUFFQTtJQUNFLHFCQUFTO1lBQVQsU0FBUztFQUNYOztFQUVBO01BQ0kscUJBQVM7Y0FBVCxTQUFTO01BQ1Qsa0JBQWtCO0VBQ3RCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucm93IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgfVxyXG5cclxuICAuY29sdW1uMSB7XHJcbiAgICBmbGV4OiA2MCVcclxuICB9XHJcbiAgXHJcbiAgLmNvbHVtbjIge1xyXG4gICAgZmxleDogMTAlO1xyXG4gIH1cclxuXHJcbiAgLmNvbHVtbjMge1xyXG4gICAgICBmbGV4OiA0MCU7XHJcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9Il19 */\"","import {Component, NgModule, OnInit} from '@angular/core';\r\nimport { BoardComponent } from './board/board.component';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport { HttpClientModule} from '@angular/common/http';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  title = 'PromoChessFrontend';\r\n\r\n\r\n\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BoardComponent } from './board/board.component';\r\nimport { MoveListComponent } from './move-list/move-list.component';\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    BoardComponent,\r\n    MoveListComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2JvYXJkL2JvYXJkLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { PromotionService } from '../promotion.service';\r\n\r\ndeclare var ChessBoard: any;\r\n@Component({\r\n  selector: 'app-board',\r\n  templateUrl: './board.component.html',\r\n  styleUrls: ['./board.component.css']\r\n})\r\n\r\nexport class BoardComponent implements OnInit {\r\n  title = 'PromoChessFrontend';\r\n\r\n  constructor(private promotionService: PromotionService){}\r\n\r\n  startBoard: any;\r\n  counter: number = 0;\r\n  difficultyDepth: number = 4;\r\n  changeBoard: Function = (boardObj) => {\r\n    this.startBoard.position(boardObj, true)\r\n};\r\n\r\n  public ngOnInit(): void{\r\n    this.startBoard = ChessBoard('board1', {\r\n      position: 'ppppkppp/pppppppp/8/8/8/8/PPPPPPPP/PPPPKPPP',\r\n      draggable: true,\r\n      onChange: onChange,\r\n      onDrop: onDrop,\r\n      onMoveEnd: onMoveEnd,\r\n      onMouseoverSquare: onMouseoverSquare,\r\n      onMouseoutSquare: onMouseoutSquare\r\n    });\r\n\r\n    let board = this.startBoard;\r\n    let numOfMoves = this.counter;\r\n    let service = this.promotionService;\r\n    let depth = this.difficultyDepth;\r\n\r\n\r\n    // Sends board changes to move-list component\r\n    function onChange (oldPos, newPos) {\r\n    }\r\n\r\n\r\n    // Returns an array of all valid position objects for the given piece BEFORE checking for \"Check\" status\r\n    // Return Type: ArrayList[]\r\n    function getPreLegalMoves(square, piece, boardPos, orientation) {\r\n      let pieceType : string;\r\n      let pieceColor : string;\r\n      // Represents indexes of allSquares array that corresponds with the given square\r\n      let row : number;\r\n      let col : number;\r\n      let moves : string[] = [];\r\n      let allSquares : Array<string[]>;\r\n\r\n      // 2D Array of all square combinations\r\n      allSquares = [[\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\"],\r\n      [\"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\"],\r\n      [\"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\"],\r\n      [\"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\"],\r\n      [\"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\"],\r\n      [\"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\"],\r\n      [\"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\"],\r\n      [\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"]];\r\n\r\n      // Assign row and col values\r\n      for (let i: number = 0; i < allSquares.length; i++) {\r\n        if (allSquares[i].includes(square)) {\r\n          row = i;\r\n          col = allSquares[i].indexOf(square)\r\n        }\r\n      }\r\n\r\n      //pieceType will return uppercase symbol\r\n      pieceType = piece.toString()[1];\r\n      //pieceColor will return lowercase char ('w' or 'b')\r\n      pieceColor = piece.toString()[0];\r\n\r\n      // If piece is Pawn\r\n      // Can attack in any 1 distance range\r\n      // Can move freely sideways, forward, and forward-diagonal\r\n      if (pieceType == \"P\") {\r\n        let searchRowIndex : number = row;\r\n        let searchColIndex : number = col;\r\n        if (orientation == \"white\") {\r\n          if (pieceColor == \"w\") {\r\n            // Look forward\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare);\r\n                // If in home \"pawn launch row\"\r\n                if (allSquares[6].includes(square)) {\r\n                  searchRowIndex -= 1;\r\n                  if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n                    searchSquare = allSquares[searchRowIndex][searchColIndex];\r\n                    if (!(searchSquare in boardPos)) {\r\n                      moves.push(searchSquare);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Forward-Diagonal\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Sideways\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n              let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n              if (searchSquare1 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare1];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare1)\r\n              }\r\n            }\r\n            if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n              let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n              if (searchSquare2 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare2];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare2)\r\n              }\r\n            }\r\n\r\n            // Look backward\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Backward-Diagonal\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if (pieceColor == \"b\") {\r\n            // Look forward\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare);\r\n                // If in home \"pawn launch row\"\r\n                if (allSquares[1].includes(square)) {\r\n                  searchRowIndex += 1;\r\n                  if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n                    searchSquare = allSquares[searchRowIndex][searchColIndex];\r\n                    if (!(searchSquare in boardPos)) {\r\n                      moves.push(searchSquare);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Forward-Diagonal\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Sideways\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n              let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n              if (searchSquare1 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare1];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare1)\r\n              }\r\n            }\r\n            if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n              let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n              if (searchSquare2 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare2];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare2)\r\n              }\r\n            }\r\n\r\n            // Look backward\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Backward-Diagonal\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        let searchRowIndex : number = row;\r\n        let searchColIndex : number = col;\r\n\r\n        switch(pieceType) {\r\n            // Rook\r\n          case \"R\":\r\n            // Look up\r\n            searchRowIndex = row;\r\n            while (searchRowIndex > 0) {\r\n              --searchRowIndex;\r\n              let upSquare : string = allSquares[searchRowIndex][col];\r\n              // If another piece exists in square\r\n              if (upSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[upSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(upSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(upSquare);\r\n              }\r\n            }\r\n\r\n            // Look down\r\n            searchRowIndex = row;\r\n            while (searchRowIndex < 7) {\r\n              ++searchRowIndex;\r\n              let downSquare : string = allSquares[searchRowIndex][col];\r\n              // If another piece exists in square\r\n              if (downSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[downSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(downSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(downSquare);\r\n              }\r\n            }\r\n\r\n            // Look left\r\n            searchColIndex = col;\r\n            while (searchColIndex > 0) {\r\n              --searchColIndex;\r\n              let leftSquare : string = allSquares[row][searchColIndex];\r\n              // If another piece exists in square\r\n              if (leftSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[leftSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(leftSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(leftSquare);\r\n              }\r\n            }\r\n\r\n            // Look right\r\n            searchColIndex = col;\r\n            while (searchColIndex < 7) {\r\n              ++searchColIndex;\r\n              let rightSquare : string = allSquares[row][searchColIndex];\r\n              // If another piece exists in square\r\n              if (rightSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[rightSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(rightSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(rightSquare);\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n            // Bishop\r\n          case \"B\":\r\n            // Look North East\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex > 0 && searchColIndex < 7) {\r\n              --searchRowIndex;\r\n              ++searchColIndex;\r\n              let NESquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (NESquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[NESquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(NESquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(NESquare);\r\n              }\r\n            }\r\n\r\n            // Look South East\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex < 7 && searchColIndex < 7) {\r\n              ++searchRowIndex;\r\n              ++searchColIndex;\r\n              let SESquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (SESquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[SESquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(SESquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(SESquare);\r\n              }\r\n            }\r\n\r\n            // Look South West\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex < 7 && searchColIndex > 0) {\r\n              ++searchRowIndex;\r\n              --searchColIndex;\r\n              let SWSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (SWSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[SWSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(SWSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(SWSquare);\r\n              }\r\n            }\r\n\r\n            // Look North West\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex > 0 && searchColIndex > 0) {\r\n              --searchRowIndex;\r\n              --searchColIndex;\r\n              let NWSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (NWSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[NWSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(NWSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(NWSquare);\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n            // Knight\r\n          case \"N\":\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n\r\n            // Look vertically left and right (Long up/down, Short left/right)\r\n            for (let i: number = 2; i >= -2; i -= 4) {\r\n              if (0 <= searchRowIndex + i && searchRowIndex + i <= 7) {\r\n                for (let j: number = 1; j >= -1; j -= 2) {\r\n                  if (0 <= searchColIndex + j && searchColIndex + j <= 7) {\r\n                    let searchSquare : string = allSquares[searchRowIndex + i][searchColIndex + j];\r\n                    // If another piece exists in square\r\n                    if (searchSquare in boardPos) {\r\n                      let bogeyPiece : string = boardPos[searchSquare];\r\n                      let bogeyColor : string = bogeyPiece[0];\r\n                      if (pieceColor != bogeyColor) {\r\n                        moves.push(searchSquare);\r\n                      }\r\n                    }\r\n                    // No piece detected, add square to list of legal moves\r\n                    else {\r\n                      moves.push(searchSquare);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look horizontally up and down (Long left/right, Short up/down)\r\n            for (let i: number = 1; i >= -1; i -= 2) {\r\n              if (0 <= searchRowIndex + i && searchRowIndex + i <= 7) {\r\n                for (let j: number = 2; j >= -2; j -= 4) {\r\n                  if (0 <= searchColIndex + j && searchColIndex + j <= 7) {\r\n                    let searchSquare : string = allSquares[searchRowIndex + i][searchColIndex + j];\r\n                    if (searchSquare in boardPos) {\r\n                      let bogeyPiece : string = boardPos[searchSquare];\r\n                      let bogeyColor : string = bogeyPiece[0];\r\n                      if (pieceColor != bogeyColor) {\r\n                        moves.push(searchSquare);\r\n                      }\r\n                    }\r\n                    else {\r\n                      moves.push(searchSquare);\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            break;\r\n\r\n            // Queen\r\n          case \"Q\":\r\n            // Look up\r\n            searchRowIndex = row;\r\n            while (searchRowIndex > 0) {\r\n              --searchRowIndex;\r\n              let upSquare : string = allSquares[searchRowIndex][col];\r\n              // If another piece exists in square\r\n              if (upSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[upSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(upSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(upSquare);\r\n              }\r\n            }\r\n\r\n            // Look down\r\n            searchRowIndex = row;\r\n            while (searchRowIndex < 7) {\r\n              ++searchRowIndex;\r\n              let downSquare : string = allSquares[searchRowIndex][col];\r\n              // If another piece exists in square\r\n              if (downSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[downSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(downSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(downSquare);\r\n              }\r\n            }\r\n\r\n            // Look left\r\n            searchColIndex = col;\r\n            while (searchColIndex > 0) {\r\n              --searchColIndex;\r\n              let leftSquare : string = allSquares[row][searchColIndex];\r\n              // If another piece exists in square\r\n              if (leftSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[leftSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(leftSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(leftSquare);\r\n              }\r\n            }\r\n\r\n            // Look right\r\n            searchColIndex = col;\r\n            while (searchColIndex < 7) {\r\n              ++searchColIndex;\r\n              let rightSquare : string = allSquares[row][searchColIndex];\r\n              // If another piece exists in square\r\n              if (rightSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[rightSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(rightSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(rightSquare);\r\n              }\r\n            }\r\n\r\n            // Look North East\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex > 0 && searchColIndex < 7) {\r\n              --searchRowIndex;\r\n              ++searchColIndex;\r\n              let NESquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (NESquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[NESquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(NESquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(NESquare);\r\n              }\r\n            }\r\n\r\n            // Look South East\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex < 7 && searchColIndex < 7) {\r\n              ++searchRowIndex;\r\n              ++searchColIndex;\r\n              let SESquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (SESquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[SESquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(SESquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(SESquare);\r\n              }\r\n            }\r\n\r\n            // Look South West\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex < 7 && searchColIndex > 0) {\r\n              ++searchRowIndex;\r\n              --searchColIndex;\r\n              let SWSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (SWSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[SWSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(SWSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(SWSquare);\r\n              }\r\n            }\r\n\r\n            // Look North West\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            while (searchRowIndex > 0 && searchColIndex > 0) {\r\n              --searchRowIndex;\r\n              --searchColIndex;\r\n              let NWSquare : string = allSquares[searchRowIndex][searchColIndex];\r\n              // If another piece exists in square\r\n              if (NWSquare in boardPos) {\r\n                let bogeyPiece : string = boardPos[NWSquare];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                // Taking your own piece is not legal\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(NWSquare);\r\n                }\r\n                // Another piece has been reached, cannot proceed any further\r\n                break;\r\n              }\r\n              // No piece detected, add square to list of legal moves\r\n              else {\r\n                moves.push(NWSquare);\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n            // King\r\n          case \"K\":\r\n            // Look Up\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare1 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare1];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare1);\r\n              }\r\n            }\r\n\r\n            // Look Down\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex];\r\n              if (searchSquare1 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare1];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare1);\r\n              }\r\n            }\r\n\r\n            // Look Sideways\r\n            searchRowIndex = row;\r\n            searchColIndex = col;\r\n            if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n              let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n              if (searchSquare1 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare1];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare1)\r\n              }\r\n            }\r\n            if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n              let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n              if (searchSquare2 in boardPos) {\r\n                let bogeyPiece : string = boardPos[searchSquare2];\r\n                let bogeyColor : string = bogeyPiece[0];\r\n                if (pieceColor != bogeyColor) {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n              else {\r\n                moves.push(searchSquare2)\r\n              }\r\n            }\r\n\r\n            // Look Up-Diagonal\r\n            searchRowIndex = row - 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n            }\r\n\r\n            // Look Down-Diagonal\r\n            searchRowIndex = row + 1;\r\n            searchColIndex = col;\r\n            if (0 <= searchRowIndex && searchRowIndex <= 7) {\r\n              if (0 <= (searchColIndex - 1) && (searchColIndex - 1) <= 7) {\r\n                let searchSquare1 : string = allSquares[searchRowIndex][searchColIndex - 1];\r\n                if (searchSquare1 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare1];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare1);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare1);\r\n                }\r\n              }\r\n              if (0 <= (searchColIndex + 1) && (searchColIndex + 1) <= 7) {\r\n                let searchSquare2 : string = allSquares[searchRowIndex][searchColIndex + 1];\r\n                if (searchSquare2 in boardPos) {\r\n                  let bogeyPiece : string = boardPos[searchSquare2];\r\n                  let bogeyColor : string = bogeyPiece[0];\r\n                  if (pieceColor != bogeyColor) {\r\n                    moves.push(searchSquare2);\r\n                  }\r\n                }\r\n                else {\r\n                  moves.push(searchSquare2);\r\n                }\r\n              }\r\n            }\r\n            break;\r\n          default:\r\n            console.log(\"Error in getPreLegalMoves()! Piece type invalid!\");\r\n            break;\r\n        }\r\n      }\r\n\r\n      return moves;\r\n    }\r\n\r\n\r\n    // Returns an array of all valid position objects for the given piece AFTER checking for \"Check\" status\r\n    // Return Type: ArrayList[]\r\n    function getLegalMoves(square, piece, boardPos, orientation) {\r\n      let moves : string[] = getPreLegalMoves(square, piece, boardPos, orientation);\r\n      let pieceType : string;\r\n      let pieceColor : string;\r\n      // Represents indexes of allSquares array that corresponds with the given square\r\n      let row : number;\r\n      let col : number;\r\n      let allSquares : Array<string[]>;\r\n\r\n      // 2D Array of all square combinations\r\n      allSquares = [[\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\"],\r\n        [\"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\"],\r\n        [\"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\"],\r\n        [\"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\"],\r\n        [\"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\"],\r\n        [\"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\"],\r\n        [\"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\"],\r\n        [\"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\"]];\r\n\r\n      // Assign row and col values\r\n      for (let i: number = 0; i < allSquares.length; i++) {\r\n        if (allSquares[i].includes(square)) {\r\n          row = i;\r\n          col = allSquares[i].indexOf(square)\r\n        }\r\n      }\r\n\r\n      //pieceType will return uppercase symbol\r\n      pieceType = piece.toString()[1];\r\n      //pieceColor will return lowercase char ('w' or 'b')\r\n      pieceColor = piece.toString()[0];\r\n\r\n      if (isCheck(pieceColor, boardPos, orientation)) {\r\n        let newMoves : string[] = moves.slice();\r\n        for (let i : number = 0; i < moves.length; i++) {\r\n          let testBoardPos : object = {};\r\n          testBoardPos = Object.assign(testBoardPos, boardPos);\r\n          let currentMove : string = moves[i];\r\n\r\n          // Simulate the move on the testBoardPos Object\r\n          // Piece leaves its origin\r\n          delete testBoardPos[square];\r\n          // If piece is attacking, move and promote\r\n          if (Object.keys(testBoardPos).includes(currentMove)) {\r\n            testBoardPos[currentMove] = piece;\r\n            testBoardPos = promote(boardPos, testBoardPos, currentMove, piece, orientation);\r\n          }\r\n          else {\r\n            testBoardPos[currentMove] = piece;\r\n          }\r\n          // Determine if simulated move is still in check or not\r\n          if (isCheck(pieceColor, testBoardPos, orientation)) {\r\n            // Move is in check and therefore illegal\r\n            delete newMoves[i];\r\n          }\r\n        }\r\n        // Remove empty elements, caused by deletion\r\n        newMoves = newMoves.filter(el => el != null);\r\n        // Set moves to newMoves\r\n        moves = newMoves;\r\n      }\r\n      return moves;\r\n    }\r\n\r\n\r\n    // Returns whether or not piece at specified square can attack opposing king\r\n    // Return Type: boolean\r\n    function canPieceTakeKing(square, boardObj, orientation) {\r\n      let piece : string = boardObj[square];\r\n      let pieceColor : string = piece[0].toString();\r\n\r\n      // Assigns square position of enemy king\r\n      let enemyKingSquare : string;\r\n      if (pieceColor === \"w\") {\r\n        enemyKingSquare = Object.keys(boardObj).find(key => boardObj[key] === \"bK\");\r\n      }\r\n      if (pieceColor === \"b\") {\r\n        enemyKingSquare = Object.keys(boardObj).find(key => boardObj[key] === \"wK\");\r\n      }\r\n\r\n      let moves : string[] = getPreLegalMoves(square, piece, boardObj, orientation);\r\n      return moves.includes(enemyKingSquare);\r\n    }\r\n\r\n\r\n    // Returns whether or not specified color team is in check or not\r\n    // Return Type: boolean\r\n    function isCheck(colorChar, boardObj, orientation) {\r\n      for (let i : number = 0; i < Object.keys(boardObj).length; i++) {\r\n        let gridKey : string = Object.keys(boardObj)[i]; // Square Position\r\n        let piece : string = boardObj[gridKey];\r\n        let pieceColor : string = piece[0];\r\n\r\n        if (pieceColor != colorChar) {\r\n          if (canPieceTakeKing(gridKey, boardObj, orientation)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n\r\n    // Returns whether or not specified color team is in checkmate or not\r\n    // Return Type: boolean\r\n    function isCheckmate(colorChar, boardObj, orientation) {\r\n      for (let i : number = 0; i < Object.keys(boardObj).length; i++) {\r\n        let gridKey : string = Object.keys(boardObj)[i]; // Square Position\r\n        let piece : string = boardObj[gridKey];\r\n        let pieceColor : string = piece[0];\r\n\r\n        if (pieceColor === colorChar) {\r\n          let moveCount : number = getLegalMoves(gridKey, piece, boardObj, orientation).length;\r\n          if (moveCount > 0) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n\r\n    // Returns board with promoted chess piece\r\n    // Return Type: Fen String\r\n    function promote(oldBoardObj, newBoardObj, newPos, piece, orientation) {\r\n      let enemyPiece: any;\r\n      let promotingPiece = piece;\r\n\r\n      // If piece was not taken and piece is a pawn that has reach enemy row, promote to queen\r\n      if (!(wasPieceTaken(oldBoardObj, newBoardObj))) {\r\n        if (orientation == \"white\") {\r\n          if (promotingPiece == \"wP\") {\r\n            // If white pawn has reach enemy row\r\n            if (newPos[1] == \"8\") {\r\n              // Promotes pawn to queen and returns fen string\r\n              newBoardObj[newPos] = \"wQ\";\r\n              return newBoardObj;\r\n            }\r\n            else {\r\n              return newBoardObj;\r\n            }\r\n          }\r\n          else if (promotingPiece == \"bP\") {\r\n            // If black pawn has reach enemy row\r\n            if (newPos[1] == \"1\") {\r\n              // Promotes pawn to queen and returns fen string\r\n              newBoardObj[newPos] = \"bQ\";\r\n              return newBoardObj;\r\n            }\r\n            else {\r\n              return newBoardObj;\r\n            }\r\n          }\r\n          else {\r\n            return newBoardObj;\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        //Finds and stores enemy piece type\r\n        for(let key in oldBoardObj){\r\n          if(key === newPos){\r\n            enemyPiece = oldBoardObj[key]\r\n          }\r\n          //Finds and stores current player piece type\r\n\r\n        }\r\n\r\n        //Still need to compare attacking and taken pieces in order to determine what rank to promote to\r\n        if(promotingPiece == \"wP\" || promotingPiece == \"bP\"){\r\n          if(enemyPiece == \"wN\" || enemyPiece == \"bN\"){\r\n            for(let key in newBoardObj){\r\n              if(key === newPos){\r\n                if(promotingPiece == \"wP\"){\r\n                  newBoardObj[key] = \"wB\";\r\n                }else {\r\n                  newBoardObj[key] = \"bB\";\r\n                }\r\n              }\r\n            }\r\n          }else if(enemyPiece == \"wQ\" || enemyPiece == \"bQ\"){\r\n            for(let key in newBoardObj){\r\n              if(key === newPos){\r\n                if(promotingPiece == \"wP\"){\r\n                  newBoardObj[key] = \"wN\";\r\n                }else {\r\n                  newBoardObj[key] = \"bN\";\r\n                }\r\n              }\r\n            }\r\n          }else {\r\n            for(let key in newBoardObj){\r\n              if(key === newPos){\r\n                if(promotingPiece == \"wP\"){\r\n                  newBoardObj[key] = \"wR\";\r\n                }else {\r\n                  newBoardObj[key] = \"bR\";\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }else if(promotingPiece == \"wR\" || promotingPiece == \"bR\"){\r\n          if(enemyPiece == \"wQ\" || enemyPiece == \"bQ\"){\r\n            for(let key in newBoardObj){\r\n              if(key === newPos){\r\n                if(promotingPiece == \"wR\"){\r\n                  newBoardObj[key] = \"wN\";\r\n                }else {\r\n                  newBoardObj[key] = \"bN\";\r\n                }\r\n              }\r\n            }\r\n          }else {\r\n            for(let key in newBoardObj){\r\n              if(key === newPos){\r\n                if(promotingPiece == \"wR\"){\r\n                  newBoardObj[key] = \"wB\";\r\n                }else {\r\n                  newBoardObj[key] = \"bB\";\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }else if(promotingPiece == \"wB\" || promotingPiece == \"bB\"){\r\n          for(let key in newBoardObj){\r\n            if(key === newPos){\r\n              if(promotingPiece == \"wB\"){\r\n                newBoardObj[key] = \"wN\";\r\n              }else {\r\n                newBoardObj[key] = \"bN\";\r\n              }\r\n            }\r\n          }\r\n        }else{\r\n          for(let key in newBoardObj){\r\n            if(key == newPos){\r\n              if(promotingPiece == \"wN\"){\r\n                newBoardObj[key] = \"wQ\"\r\n              }else if(promotingPiece == \"bN\"){\r\n                newBoardObj[key] = \"bQ\"\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        //returns the newly changed Board Object as a FEN String,\r\n        //if No change was made then FEN will be returned unchanged\r\n        return newBoardObj\r\n      }\r\n    }\r\n\r\n    // Returns true if a piece was taken between 2 board states\r\n    // Return Type: boolean\r\n    function wasPieceTaken(oldBoardObj, newBoardObj) {\r\n        if(Object.entries(oldBoardObj).length > Object.entries(newBoardObj).length){\r\n          return true\r\n        } else {\r\n          return false\r\n        }\r\n    }\r\n\r\n    // Outlines all legal moves for given pos\r\n    // Return Type: void\r\n    function showLegalMoves(square, piece, boardPos, orientation) {\r\n      let legalMoves : string[] = getLegalMoves(square, piece, boardPos, orientation);\r\n      for (let i : number = 0; i < legalMoves.length; i++) {\r\n        let tempSqName : string = legalMoves[i];\r\n        let squareElement : Element = document.getElementsByClassName(\"square-\" + tempSqName)[0];\r\n\r\n        // Create Overlay Div\r\n        let newElement : Element = document.createElement('div');\r\n        newElement.className = \"legal-overlay\";\r\n        newElement.id = `${tempSqName}-overlay`;\r\n        newElement.setAttribute(\"style\", \"background-color: springgreen; opacity: 0.4; width: 100%; height: 100%; position: relative; z-index: 0; float: right\");\r\n        squareElement.insertAdjacentElement('afterbegin', newElement);\r\n\r\n        // Make sure each time to make all chess-piece images float above\r\n        // TODO: See if this style attribute can be applied fewer times, rather than every method call\r\n        let imgElements : HTMLCollection = document.getElementsByClassName('piece-417db');\r\n        for (let i : number = 0; i < imgElements.length; i++) {\r\n          let tempElement : Element = imgElements[i];\r\n          let tempAttr : string = tempElement.getAttribute(\"style\");\r\n          tempAttr += \"; z-index: 0; position: absolute;\";\r\n          tempElement.setAttribute(\"style\", tempAttr);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Removes outlines of all legal moves for given pos\r\n    // Return Type: void\r\n    function hideLegalMoves(square, piece, boardPos, orientation) {\r\n      let overlayElements : HTMLCollection = document.getElementsByClassName(\"legal-overlay\");\r\n      // While there is a first element in overlayElements\r\n      while (overlayElements[0]) {\r\n        let overlaySq : Element = overlayElements[0];\r\n        overlaySq.parentNode.removeChild(overlaySq);\r\n      }\r\n    }\r\n\r\n    // Activates whenever player-drag move has been made\r\n    function onDrop(source, target, piece, newPos, oldPos, orientation) {\r\n      hideLegalMoves(source, piece, oldPos, orientation);\r\n\r\n      let legalSpaces = getLegalMoves(source, piece, oldPos, orientation);\r\n      let wasLegal: boolean;\r\n      wasLegal = false;\r\n\r\n      for(let key in legalSpaces){\r\n        if(target === legalSpaces[key]){\r\n          wasLegal = true;\r\n        }\r\n      }\r\n\r\n      if(!wasLegal){\r\n        return 'snapback';\r\n      }else{\r\n        numOfMoves += 1;\r\n        service.addMoveToList(numOfMoves, piece, source, target, newPos);\r\n        if(wasPieceTaken(oldPos, newPos)){\r\n          board.position(promote(oldPos, newPos, target, piece, orientation), false);\r\n        }\r\n        else {\r\n          if (piece == \"wP\" || piece == \"bP\") {\r\n            board.position(promote(oldPos, newPos, target, piece, orientation), false);\r\n          }\r\n        }\r\n        setTimeout(function () {\r\n          let restPackage : object = {\r\n            \"fenString\": board.fen(),\r\n            \"aiColor\": piece[0],\r\n            \"depth\": depth,\r\n            \"orientation\": orientation\r\n          };\r\n\r\n          let aiBoardFen : any;\r\n          service.getAIMove(restPackage).subscribe(data => {});\r\n          console.log(aiBoardFen);\r\n          board.position(ChessBoard.fenToObj(aiBoardFen), true);\r\n        }, 5000);\r\n        return 'trash';\r\n      }\r\n    }\r\n\r\n    // Activates whenever animation has occurred (AI has made move)\r\n    function onMoveEnd(oldPos, newPos) {\r\n\r\n    }\r\n\r\n    //Activates whenever mouse enters square\r\n    function onMouseoverSquare(square, piece, boardPos, orientation){\r\n      if (piece) {\r\n        showLegalMoves(square, piece, boardPos, orientation);\r\n        // console.log(isCheckmate(piece[0], boardPos, orientation));\r\n      }\r\n    }\r\n\r\n    //Activates whenever mouse leaves square\r\n    function onMouseoutSquare(square, piece, boardPos, orientation){\r\n      if (piece) {\r\n        hideLegalMoves(square, piece, boardPos, orientation);\r\n      }\r\n    }\r\n  }\r\n\r\n  serviceCheck() {\r\n    }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vdmUtbGlzdC9tb3ZlLWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { PromotionService } from '../promotion.service';\r\n\r\n@Component({\r\n  selector: 'app-move-list',\r\n  templateUrl: './move-list.component.html',\r\n  styleUrls: ['./move-list.component.css']\r\n})\r\nexport class MoveListComponent implements OnInit {\r\n\r\n  constructor(private promotionService: PromotionService) { }\r\n\r\n  moveList;\r\n  ngOnInit() {\r\n\r\n    this.moveList = this.promotionService.getMoveList().reverse();\r\n\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PromotionService {\r\n\r\n  private moves: Array<{ id: number, piece: String, source: String, target: String, fen: String}> = [];\r\n  private urlREST : string = \"http://localhost:8080/PromotionChessAPI/api/chess\";\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addMoveToList(index, chosenPiece, src, tar, newFen) {\r\n    this.moves.push({id: index, piece: chosenPiece, source: src, target: tar, fen: newFen});\r\n\r\n    // console.log('addMoveToList was called!');\r\n    // console.log(this.moves)\r\n  }\r\n\r\n  getMoveList() {\r\n    return this.moves;\r\n  }\r\n\r\n  getAIMove(boardPackage: object): Observable<string> {\r\n    return this.http.post<any>(this.urlREST, boardPackage);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}